generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider                  = "zod-prisma-types"
  output                    = "../src/db/zod"
  createRelationValuesTypes = true
  createPartialTypes        = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator kysely {
  provider     = "prisma-kysely"
  output       = "../src/db"
  fileName     = "types.ts"
  enumFileName = "enums.ts"
}

model Tour {
  id              Int         @id @default(autoincrement())
  name            String      @unique
  duration        Int
  maxGroupSize    Int
  difficulty      Difficulty
  ratingsAverage  Float       @default(4.5) /// @zod.number.min(1).max(5)
  ratingsQuantity Int         @default(0)
  price           Int
  priceDiscount   Int?
  summary         String
  description     String?
  imageCover      String
  images          String[]
  createdAt       DateTime    @default(now())
  startDates      StartDate[]
  isPremium       Boolean     @default(false)

  @@map("tour")
}

model StartDate {
  id        Int      @id @default(autoincrement())
  tour      Tour     @relation(fields: [tourId], references: [id], onDelete: Cascade)
  tourId    Int
  startDate DateTime

  @@map("start_date")
}

model User {
  id                 Int       @id @default(autoincrement())
  name               String
  email              String    @unique /// @zod.string.email()
  password           String /// @zod.string.min(8).max(20)
  role               Role      @default(USER)
  createdAt          DateTime  @default(now())
  passwordChangedAt  DateTime?
  profile            Profile?
  resetPasswordToken String?
  resetPasswordExp   DateTime?
  deleted            Boolean   @default(false)

  @@map("user")
}

model Profile {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    Int     @unique
  firstName String?
  lastName  String?
  bio       String?
  image     String?

  @@map("profile")
}

enum Role {
  USER
  PREMIUM_USER
  ADMIN
}

enum Difficulty {
  EASY
  MEDIUM
  DIFFICULT
}
